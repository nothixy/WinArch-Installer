cat <<- EOF > /bin.py
import os
import random
import sys
import threading
import time
import base64
import math
import string
import configparser

from PySide6.QtCore import Qt, Slot, QProcess
from PySide6.QtWidgets import (QApplication, QLabel, QPushButton,
                               QVBoxLayout, QWidget, QProgressBar,
                               QTabWidget, QHBoxLayout, QDialog,
                               QDialogButtonBox, QScrollArea)


class Dialog(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("WinArch (stage 2) - Error")
        self.setGeometry(0, 0, 100, 50)
        q_btn = QDialogButtonBox.Yes | QDialogButtonBox.No

        self.buttonBox = QDialogButtonBox(q_btn)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        self.layout = QVBoxLayout()
        message = QLabel("An error occurred, do you want to exit now ?")
        self.layout.addWidget(message)
        self.layout.addWidget(self.buttonBox)
        self.setLayout(self.layout)


def app_error():
    if Dialog().exec():
        sys.exit()


class MyWidget(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        _, self.desktop, self.hostname, self.keymap, self.language, self.timezone, self.unamesys, self.uname, self.password = sys.argv
        self.numberoftasks = 8
        self.dobreak = False
        self.setWindowTitle("WinArch installer (stage 2)")
        self.message = QLabel("Checking for network connectivity")
        self.message.setAlignment(Qt.AlignCenter)
        self.progressbar = QProgressBar()
        self.progressbar.setMinimum(0)
        self.progressbar.setMaximum(0)
        self.progressbar.setValue(0)
        self.setGeometry(0, 0, 800, 450)
        self.setMinimumSize(800, 450)
        self.layout = QVBoxLayout(self)
        self.layout.addWidget(self.message)
        self.layout.addWidget(self.progressbar)
        self.checkfornetwork()

    def changetab(self):
        while True:
            if self.dobreak:
                break
            else:
                time.sleep(2)
                if self.tabs.currentIndex() <= (self.tabs.count() - 2):
                    self.tabs.setCurrentIndex((self.tabs.currentIndex() + 1) % (self.tabs.count() - 2))

    def startinstalling(self):
        # threading.Thread(target=self.changetab).start()
        config = configparser.ConfigParser(allow_no_value=True)
        config.optionxform = str
        config.read('/etc/pacman.conf')
        config['options']['ParallelDownloads'] = '10'
        config.write(open('/etc/pacman.conf', 'w'))
        self.message.deleteLater()
        self.tabbar = QTabWidget()
        self.task = QLabel()
        self.layout.addWidget(self.tabbar)
        self.layout.addWidget(self.task)
        self.layout.addWidget(self.progressbar)
        self.progressbar.setMaximum(100)
        self.progressbar.setValue(0)
        self.logs = QLabel()
        self.logs.setAlignment(Qt.AlignTop)
        self.output = QLabel()
        self.output.setAlignment(Qt.AlignTop)
        self.scrollerlogs = QScrollArea()
        self.scrollerlogs.setWidget(self.logs)
        self.scrollerlogs.setWidgetResizable(True)
        self.scrolleroutput = QScrollArea()
        self.scrolleroutput.setWidget(self.output)
        self.scrolleroutput.setWidgetResizable(True)
        self.tabbar.addTab(self.scrolleroutput, "Installer output")
        self.tabbar.addTab(self.scrollerlogs, "Installer errors")
        self.task.setText("Formatting partitions")
        self.snapshot = ""
        self.partition = QProcess()
        self.partition.finished.connect(self.installpackages)
        self.partition.readyRead.connect(lambda: self.updateOutput(self.partition.readAllStandardOutput(), False))
        self.partition.start("sh", ['-c', 'set -eE; trap "echo -e \\\"\nFAIL\\\"" ERR; echo -en "Wait: Setting NTP"; timedatectl set-ntp true; umount -l /mnt 2>/dev/null || true; echo -en "Done: Setting NTP\nWait: Formatting /dev/disk/by-label/ARCH as ext4 with label ARCH";  yes | mkfs.ext4 -F -F -q -L ARCH /dev/disk/by-label/ARCH; echo -en "Done: Setting NTP\nDone: Formatting /dev/disk/by-label/ARCH as ext4 with label ARCH\nWait: Mounting this partition to /mnt"; mount /dev/disk/by-label/ARCH /mnt; mkdir -p /mnt/boot; drive="/dev/$(lsblk -ndo pkname $(findmnt /mnt -o SOURCE -un))"; device="$(fdisk -l $drive -o Device,Type | grep "EFI System" | cut -d \" \" -f1)"; echo -en "Done: Setting NTP\nDone: Formatting /dev/disk/by-label/ARCH as ext4 with label ARCH\nDone: Mounting this partition to /mnt\nWait: Mounting $device to /mnt/boot"; mount \"$device\" /mnt/boot; echo -en "Done: Setting NTP\nDone: Formatting /dev/disk/by-label/ARCH as ext4 with label ARCH\nDone: Mounting this partition to /mnt\nDone: Mounting $device to /mnt/boot";'])

    def updateOutput(self, output, clear):
        if output == "\nFAIL\n":
            self.output.setText(self.output.text() + output)
        else:
            if clear:
                self.snapshot = self.output.text() + "\n"
            self.output.setText(self.snapshot + output)

    def installpackages(self):
        self.logs.setText(self.logs.text() + self.partition.readAllStandardError())
        if self.partition.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Installing packages")
        self.pacstrap = QProcess()
        self.pacstrap.finished.connect(self.generatefstab)
        self.pacstrap.readyRead.connect(lambda: self.updateOutput(self.pacstrap.readAllStandardOutput(), False))
        self.pacstrap.start("sh", ['-c', 'desktop=' + self.desktop + '; echo -ne "Wait: Installing base packages with desktop $desktop to /mnt"; case $desktop in gnome) pacstrap /mnt --noprogressbar gnome-software-packagekit-plugin gnome gdm linux linux-firmware flatpak base base-devel networkmanager bluez firefox bash-completion grub os-prober xorg;; kde) pacstrap /mnt --noprogressbar plasma dolphin konsole discover packagekit-qt5 plasma-wayland-session sddm linux linux-firmware flatpak base base-devel networkmanager bluez firefox bash-completion grub os-prober xorg;; budgie) pacstrap /mnt --noprogressbar budgie-desktop gnome gnome-software-packagekit-plugin lightdm-webkit-theme-litarvan lightdm-webkit2-greeter lightdm linux linux-firmware flatpak base base-devel networkmanager bluez firefox bash-completion grub os-prober xorg;; cinnamon) pacstrap /mnt --noprogressbar cinnamon gnome-software gnome-software-packagekit-plugin lightdm-slick-greeter lightdm linux linux-firmware flatpak base base-devel networkmanager bluez firefox bash-completion grub os-prober xorg;; pantheon) pacstrap /mnt --noprogressbar pantheon ligthdm-pantheon-greeter lightdm linux linux-firmware flatpak base base-devel networkmanager bluez firefox bash-completion grub os-prober xorg;; dde) pacstrap /mnt --noprogressbar deepin deepin-extra deepin-store deepin-session-shell lightdm linux linux-firmware flatpak base base-devel networkmanager bluez firefox bash-completion grub os-prober xorg;; esac; echo -ne "Done: Installing base packages with desktop $desktop to /mnt"'])

    def generatefstab(self):
        self.logs.setText(self.logs.text() + "\n" + self.pacstrap.readAllStandardError())
        if self.pacstrap.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Generating fstab")
        self.genfstab = QProcess()
        self.genfstab.finished.connect(self.configpcinfo)
        self.genfstab.readyRead.connect(lambda: self.updateOutput(self.genfstab.readAllStandardOutput(), False))
        self.genfstab.start("sh", ['-c', 'set -eE; trap "echo -e \\\"\nFAIL\\\"" ERR; echo -ne "Wait: Generating fstab"; genfstab -U /mnt >> /mnt/etc/fstab; echo -ne "Done: Generating fstab"'])

    def configpcinfo(self):
        self.logs.setText(self.logs.text() + "\n" + self.genfstab.readAllStandardError())
        if self.genfstab.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Setting PC configuration")
        self.configpc = QProcess()
        self.configpc.finished.connect(self.configusers)
        self.configpc.readyRead.connect(lambda: self.updateOutput(self.configpc.readAllStandardOutput(), False))
        self.configpc.start("sh", ['-c', 'hostname=' + self.hostname + '; language=' + self.language + '; keymap=' + self.keymap + '; timezone=' + self.timezone + '; set -eE; trap "echo -e \\\"\nFAIL\\\"" ERR; echo -ne "Wait: Setting hostname"; echo "$hostname" >> /mnt/etc/hostname; echo -ne "Done: Setting hostname\nWait: Setting locale"; echo \"$language\" >> /mnt/etc/locale.gen; arch-chroot /mnt locale-gen; echo \"LANG=$(echo $language | cut -d \\\" \\\" -f 1)\" > /mnt/etc/locale.conf; echo -ne "Done: Setting hostname\nDone: Setting locale\nWait: Setting keymap"; echo \"KEYMAP=$keymap\" > /mnt/etc/vconsole.conf; echo -ne "Done: Setting hostname\nDone: Setting locale\nDone: Setting keymap\nWait: Setting timezone"; cd /mnt/etc/; ln -svf ../usr/share/zoneinfo/$timezone localtime; echo -ne "Done: Setting hostname\nDone: Setting locale\nDone: Setting keymap\nDone: Setting timezone"'])

    def configusers(self):
        self.logs.setText(self.logs.text() + "\n" + self.configpc.readAllStandardError())
        if self.configpc.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Configuring users")
        self.useradd = QProcess()
        self.useradd.finished.connect(self.configservices)
        self.useradd.readyRead.connect(lambda: self.updateOutput(self.useradd.readAllStandardOutput(), False))
        rootpwd = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(50))
        self.useradd.start("sh", ['-c', 'unamesys=' + self.unamesys + '; uname=' + self.uname + '; password=' + self.password + '; set -eE; trap "echo \\\"\nFAIL\\\"" ERR; echo -ne "Wait: Adding user \"$unamesys\""; useradd -R /mnt -mG wheel,sys "$unamesys"; echo -ne "Done: Adding user \"$unamesys\"\nWait: Setting password for \"$unamesys\""; echo -e "$password\n$password" | passwd -R /mnt "$unamesys"; if [ "$uname" != "" ]; then export a=true; echo -ne "Done: Adding user \"$unamesys\"\nDone: Setting password for \"unamesys\"\nWait: Setting pretty name to \"$uname\" for user \"$unamesys\""; arch-chroot /mnt chfn -f "$uname" "$unamesys"; fi; if [ $a == true ]; then echo -ne "Done: Adding user \"$unamesys\"\nDone: Setting password for \"$unamesys\"\nDone: Setting pretty name to \"$uname\" for user \"$unamesys\"\nWait: Setting random root password"; else echo -ne "Done: Adding user \"$unamesys\"\nDone: Setting password for \"$unamesys\"\nWait: Setting random root password"; fi; echo "' + rootpwd + '\n' + rootpwd + '" | passwd -R /mnt root; if [ $a == true ]; then echo -ne "Done: Adding user \"$unamesys\"\nDone: Setting password for \"$unamesys\"\nDone: Setting pretty name to \"$uname\" for user \"$unamesys\"\nDone: Setting random root password"; else echo -ne "Done: Adding user \"$unamesys\"\nDone: Setting password for \"$unamesys\"\nDone: Setting random root password"; fi'])

    def configservices(self):
        self.logs.setText(self.logs.text() + "\n" + self.useradd.readAllStandardError())
        if self.useradd.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Enabling system services")
        self.systemctl = QProcess()
        self.systemctl.finished.connect(self.touches)
        self.systemctl.readyRead.connect(lambda: self.updateOutput(self.systemctl.readAllStandardOutput(), False))
        self.systemctl.start("sh", ['-c', 'desktop=' + self.desktop + '; set -eE; trap "echo \\\"\nFAIL\\\"" ERR;case $desktop in gnome) export dm=gdm;; kde) export dm=sddm;; budgie) export dm=lightdm; export greeter=lightdm-webkit2-greeter;; cinnamon) export dm=lightdm; export greeter=lightdm-slick-greeter;; pantheon) export dm=lightdm; export greeter=io.elementary.greeter;; dde) export dm=lightdm; export greeter=ligthdm-deepin-greeter;; esac; if [ "$dm" == "lightdm" ]; then sed -i "s/example-gtk-gnome/$greeter/g" /mnt/etc/lightdm/lightdm.conf; if [ "$greeter" == "lightdm-webkit2-greeter"]; then sed -i "s/antergos/litarvan/" /mnt/etc/lightdm/lightdm-webkit2-greeter.conf; fi; fi; echo -ne "Wait: Enabling system services"; arch-chroot /mnt systemctl enable NetworkManager bluetooth $dm; echo -ne "Done: Enabling system services"'])

    def touches(self):
        self.logs.setText(self.logs.text() + "\n" + self.systemctl.readAllStandardError())
        if self.systemctl.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Adding finishing touches")
        self.echo = QProcess()
        self.echo.finished.connect(self.bootloader)
        self.echo.readyRead.connect(lambda: self.updateOutput(self.echo.readAllStandardOutput(), False))
        self.echo.start("sh", ['-c', 'hostname=' + self.hostname + '; set -eE; trap "echo \\\"\nFAIL\\\"" ERR; echo -ne "Wait: Setting hosts file"; echo -e "127.0.0.1  localhost\n::1          localhost\n127.0.1.1     \"$hostname\"" >> /mnt/etc/hosts; echo -ne "Done: Setting hosts file\nWait: Enabling sudo access for group wheel"; echo -e "%wheel ALL=(ALL) ALL" >> /mnt/etc/sudoers; echo -ne "Done: Setting hosts file\nDone: Enabling sudo access for group wheel"'])

    def bootloader(self):
        self.logs.setText(self.logs.text() + "\n" + self.echo.readAllStandardError())
        if self.echo.exitCode() != 0:
            app_error()
            return
        self.updateOutput("", True)
        self.updateprogressbar()
        self.task.setText("Updating bootloader entries")
        self.grub = QProcess()
        self.grub.finished.connect(self.prefinish)
        self.grub.readyRead.connect(lambda: self.updateOutput(self.grub.readAllStandardOutput(), False))
        self.grub.start("sh", ['-c', 'set -eE; trap "echo \\\"\nFAIL\\\"" ERR; echo -ne "Wait: Configuring bootloader entries"; echo "GRUB_DISABLE_OS_PROBER=false" >> /mnt/etc/default/grub; arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg; echo -ne "Done: Configuring bootloader entries"'])

    def prefinish(self):
        self.logs.setText(self.logs.text() + "\n" + self.grub.readAllStandardError())
        if self.grub.exitCode() != 0:
            app_error()
            return
        self.finish()

    def finish(self):
        self.tabbar.deleteLater()
        self.task.deleteLater()
        self.progressbar.deleteLater()
        self.finished = QLabel("The installation has finished")
        self.finished.setAlignment(Qt.AlignCenter)
        self.rebootButton = QPushButton("Reboot now")
        self.layout.addWidget(self.finished)
        self.layout.addWidget(self.rebootButton)
        self.rebootButton.clicked.connect(lambda: os.system('reboot'))

    def updateprogressbar(self):
        numberoftimes = math.ceil(self.progressbar.value() * self.numberoftasks / 100)
        self.progressbar.setValue((numberoftimes + 1) * 100 / self.numberoftasks)

    def dosth(self):
        if self.ping.exitCode() != 0:
            self.message.setText("Unable to connect to network, please connect with the taskbar icon and restart the installer")
            self.progressbar.hide()
        else:
            self.startinstalling()

    @Slot()
    def checkfornetwork(self):
        self.show()
        self.message.setText("Checking")
        self.ping = QProcess()
        self.ping.finished.connect(self.dosth)
        self.ping.start("ping", ["-c1", "archlinux.org"])


if __name__ == "__main__":
    app = QApplication(sys.argv)

    widget = MyWidget()
    widget.show()

    sys.exit(app.exec())
EOF

cat <<- EOF > /usr/bin/startinstaller.sh
#!/bin/bash
connect() {
        xfce4-terminal --disable-server -x nmtui-connect
        sleep 5
        if ! ping -c1 archlinux.org >/dev/null 2>&1; then
                connect;
        else
                return;
        fi
}
if ! ping -c1 archlinux.org >/dev/null 2>&1; then
        connect;
fi
xfce4-terminal --disable-server -x pip install PySide6
EOF

chmod a+x /usr/bin/startinstaller.sh

cat <<- EOF > /etc/xdg/autostart/installer.desktop
[Desktop Entry]
Type=Application
Name=Python installer
Exec=/usr/bin/startinstaller.sh
EOF

echo "python /bin.py \"'$desktop'\" \"'$hostname'\" \"'$keymap'\" \"'$language'\" \"'$timezone'\" \"'$unamesys'\" \"'$uname'\" \"'$password'\"" >> /usr/bin/startinstaller.sh

startx